diff --git a/drivers/video/sunxi/disp2/disp/Makefile b/drivers/video/sunxi/disp2/disp/Makefile
index a27ff9a..a513875 100644
--- a/drivers/video/sunxi/disp2/disp/Makefile
+++ b/drivers/video/sunxi/disp2/disp/Makefile
@@ -16,6 +16,7 @@ disp-$(CONFIG_EINK_PANEL_USED) += de/disp_eink_manager.o de/eink_pipeline_manage
 disp-objs += lcd/panels.o lcd/lcd_source.o lcd/default_panel.o
 
 
+disp-$(CONFIG_LCD_SUPPORT_ST7701S_RGB) += lcd/st7701s_rgb.o
 disp-$(CONFIG_LCD_SUPPORT_HE0801A068) += lcd/he0801a068.o
 disp-$(CONFIG_EINK_PANEL_USED) += lcd/default_eink.o
 disp-$(CONFIG_LCD_SUPPORT_LT070ME05000) += lcd/lt070me05000.o
diff --git a/drivers/video/sunxi/disp2/disp/de/disp_display.c b/drivers/video/sunxi/disp2/disp/de/disp_display.c
index 45cb431..6e63634 100644
--- a/drivers/video/sunxi/disp2/disp/de/disp_display.c
+++ b/drivers/video/sunxi/disp2/disp/de/disp_display.c
@@ -1294,7 +1294,7 @@ disp_lcd_flow *bsp_disp_lcd_get_close_flow(u32 disp)
 }
 
 s32 bsp_disp_lcd_set_panel_funs(char *name, disp_lcd_panel_fun *lcd_cfg)
-{
+{tick_printf("###set panel name %s\n", name);
 	struct disp_device *lcd;
 	u32 num_screens;
 	u32 screen_id;
@@ -1308,6 +1308,7 @@ s32 bsp_disp_lcd_set_panel_funs(char *name, disp_lcd_panel_fun *lcd_cfg)
 				gdisp.lcd_registered[screen_id] = 1;
 				registered_cnt++;
 				DE_INF("panel driver %s register\n", name);
+tick_printf("###set panel 1111\n");
 			}
 		}
 	}
@@ -1319,6 +1320,7 @@ s32 bsp_disp_lcd_set_panel_funs(char *name, disp_lcd_panel_fun *lcd_cfg)
 			if (!lcd->set_panel_func(lcd, name, lcd_cfg)) {
 				gdisp.lcd_registered[screen_id] = 1;
 				registered_cnt++;
+tick_printf("###set panel 2222\n");
 				DE_INF("panel driver %s register for compatible usage\n", name);
 			}
 		}
diff --git a/drivers/video/sunxi/disp2/disp/de/include.h b/drivers/video/sunxi/disp2/disp/de/include.h
index 57c5db6..e8d7b15 100644
--- a/drivers/video/sunxi/disp2/disp/de/include.h
+++ b/drivers/video/sunxi/disp2/disp/de/include.h
@@ -104,7 +104,7 @@ s32 bsp_disp_get_print_level(void);
 #include "../disp_sys_intf.h"
 #include "disp_features.h"
 
-#define OSAL_PRINTF
+#define OSAL_PRINTF 
 #define __inf(msg...)
 #define __msg(msg...)
 #define __wrn(fmt, msg...) pr_notice(fmt, ##msg)
diff --git a/drivers/video/sunxi/disp2/disp/de/lowlevel_sun50iw1/disp_al.c b/drivers/video/sunxi/disp2/disp/de/lowlevel_sun50iw1/disp_al.c
index 590d9ed..af51eb8 100755
--- a/drivers/video/sunxi/disp2/disp/de/lowlevel_sun50iw1/disp_al.c
+++ b/drivers/video/sunxi/disp2/disp/de/lowlevel_sun50iw1/disp_al.c
@@ -174,7 +174,7 @@ int disp_al_smbl_get_status(unsigned int disp)
 }
 
 static struct lcd_clk_info clk_tbl[] = {
-	{LCD_IF_HV,     6, 1, 1, 0},
+	{LCD_IF_HV,    16, 1, 1, 0},
 	{LCD_IF_CPU,   12, 1, 1, 0},
 	{LCD_IF_LVDS,   7, 1, 1, 0},
 	{LCD_IF_DSI,    4, 1, 4, 148500000},
diff --git a/drivers/video/sunxi/disp2/disp/de/lowlevel_v2x/disp_al.c b/drivers/video/sunxi/disp2/disp/de/lowlevel_v2x/disp_al.c
index 5fb32a2..a2c41c0 100644
--- a/drivers/video/sunxi/disp2/disp/de/lowlevel_v2x/disp_al.c
+++ b/drivers/video/sunxi/disp2/disp/de/lowlevel_v2x/disp_al.c
@@ -660,7 +660,7 @@ int disp_al_smbl_get_status(unsigned int disp)
 }
 
 static struct lcd_clk_info clk_tbl[] = {
-	{LCD_IF_HV, 6, 1, 1, 0},
+	{LCD_IF_HV, 16, 1, 1, 0},
 	{LCD_IF_CPU, 12, 1, 1, 0},
 	{LCD_IF_LVDS, 7, 1, 1, 0},
 #if defined(DSI_VERSION_40)
diff --git a/drivers/video/sunxi/disp2/disp/lcd/Kconfig b/drivers/video/sunxi/disp2/disp/lcd/Kconfig
index 75960ae..724903d 100644
--- a/drivers/video/sunxi/disp2/disp/lcd/Kconfig
+++ b/drivers/video/sunxi/disp2/disp/lcd/Kconfig
@@ -1,3 +1,9 @@
+config LCD_SUPPORT_ST7701S_RGB
+        bool "LCD support ST7701S RGB panel"
+        default n
+        ---help---
+                If you want to support ST7701S RGB panel for display driver, select it.
+
 config LCD_SUPPORT_GG1P4062UTSW
 	bool "LCD support cpu_gg1p4062utsw panel"
 	default n
diff --git a/drivers/video/sunxi/disp2/disp/lcd/panels.c b/drivers/video/sunxi/disp2/disp/lcd/panels.c
index 2fc8e9a..6a392e4 100644
--- a/drivers/video/sunxi/disp2/disp/lcd/panels.c
+++ b/drivers/video/sunxi/disp2/disp/lcd/panels.c
@@ -162,7 +162,9 @@ __lcd_panel_t* panel_array[] = {
 #ifdef CONFIG_LCD_SUPPORT_TFT08006
 	&tft08006_panel,
 #endif
-
+#ifdef CONFIG_LCD_SUPPORT_ST7701S_RGB
+        &st7701s_rgb_panel,
+#endif
 	/* add new panel below */
 
 	NULL,
@@ -180,7 +182,7 @@ static void lcd_set_panel_funs(void)
 }
 
 int lcd_init(void)
-{
+{tick_printf("###LCD init\n");
 	sunxi_disp_get_source_ops(&g_lcd_drv.src_ops);
 	lcd_set_panel_funs();
 
diff --git a/drivers/video/sunxi/disp2/disp/lcd/panels.h b/drivers/video/sunxi/disp2/disp/lcd/panels.h
index 8ab42cc..e87006c 100644
--- a/drivers/video/sunxi/disp2/disp/lcd/panels.h
+++ b/drivers/video/sunxi/disp2/disp/lcd/panels.h
@@ -265,4 +265,9 @@ extern __lcd_panel_t jd9366ab_3_panel;
 extern __lcd_panel_t tft08006_panel;
 #endif
 
+#ifdef CONFIG_LCD_SUPPORT_ST7701S_RGB
+extern __lcd_panel_t st7701s_rgb_panel;
+#endif
+
+
 #endif
diff --git a/drivers/video/sunxi/disp2/disp/lcd/st7701s_rgb.c b/drivers/video/sunxi/disp2/disp/lcd/st7701s_rgb.c
new file mode 100644
index 0000000..40a6f06
--- /dev/null
+++ b/drivers/video/sunxi/disp2/disp/lcd/st7701s_rgb.c
@@ -0,0 +1,524 @@
+/*
+ * drivers/video/fbdev/sunxi/disp2/disp/lcd/st7701s_rgb.c
+ *
+ * Copyright (c) 2018-2021 Allwinnertech Co., Ltd.
+ * Author: zepan <zepan@sipeed.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+&lcd0 {
+	lcd_used            = <1>;
+
+	lcd_driver_name     = "st7701s_rgb";
+	lcd_backlight       = <100>;
+	lcd_if              = <2>;
+
+	lcd_x               = <480>;
+	lcd_y               = <480>;
+	lcd_width           = <70>;
+	lcd_height          = <72>;
+	lcd_dclk_freq       = <30>;
+
+	lcd_pwm_used        = <1>;
+	lcd_pwm_ch          = <7>;
+	lcd_pwm_freq        = <19000>;
+	lcd_pwm_pol         = <0>;
+	lcd_pwm_max_limit   = <255>;
+
+	lcd_hbp             = <60>;
+	lcd_ht              = <612>;
+	lcd_hspw            = <12>;
+	lcd_vbp             = <18>;
+	lcd_vt              = <520>;
+	lcd_vspw            = <4>;
+
+	lcd_dsi_if          = <0>;
+	lcd_dsi_lane        = <4>;
+	lcd_lvds_if         = <0>;
+	lcd_lvds_colordepth = <0>;
+	lcd_lvds_mode       = <0>;
+	lcd_frm             = <0>;
+	lcd_hv_clk_phase    = <0>;
+	lcd_hv_sync_polarity= <0>;
+	lcd_io_phase        = <0x0000>;
+	lcd_gamma_en        = <0>;
+	lcd_bright_curve_en = <0>;
+	lcd_cmap_en         = <0>;
+	lcd_fsync_en        = <0>;
+	lcd_fsync_act_time  = <1000>;
+	lcd_fsync_dis_time  = <1000>;
+	lcd_fsync_pol       = <0>;
+
+	deu_mode            = <0>;
+	lcdgamma4iep        = <22>;
+	smart_color         = <90>;
+
+	lcd_gpio_0 = <&pio PG 13 GPIO_ACTIVE_HIGH>;RST
+	lcd_gpio_1 = <&pio PE 14 GPIO_ACTIVE_HIGH>;CS
+	lcd_gpio_2 = <&pio PE 12 GPIO_ACTIVE_HIGH>;SDA
+	lcd_gpio_3 = <&pio PE 15 GPIO_ACTIVE_HIGH>;SCK
+	pinctrl-0 = <&rgb18_pins_a>;
+	pinctrl-1 = <&rgb18_pins_b>;
+};
+ */
+#include "st7701s_rgb.h"
+#include "default_panel.h"
+
+//s32 sunxi_lcd_gpio_set_value(u32 screen_id, u32 io_index, u32 value)
+
+#define st7701s_spi_scl_1   sunxi_lcd_gpio_set_value(0, 3, 1)
+#define st7701s_spi_scl_0   sunxi_lcd_gpio_set_value(0, 3, 0)
+#define st7701s_spi_sdi_1   sunxi_lcd_gpio_set_value(0, 2, 1)
+#define st7701s_spi_sdi_0   sunxi_lcd_gpio_set_value(0, 2, 0)
+#define st7701s_spi_cs_1    sunxi_lcd_gpio_set_value(0, 1, 1)
+#define st7701s_spi_cs_0    sunxi_lcd_gpio_set_value(0, 1, 0)
+#define st7701s_spi_reset_1 sunxi_lcd_gpio_set_value(0, 0, 1)
+#define st7701s_spi_reset_0 sunxi_lcd_gpio_set_value(0, 0, 0)
+
+static void LCD_power_on(u32 sel);
+static void LCD_power_off(u32 sel);
+static void LCD_bl_open(u32 sel);
+static void LCD_bl_close(u32 sel);
+
+static void LCD_panel_init(u32 sel);
+static void LCD_panel_exit(u32 sel);
+
+static void LCD_cfg_panel_info(panel_extend_para *info)
+{
+	u32 i = 0, j = 0;
+	u32 items;
+	u8 lcd_gamma_tbl[][2] = {
+		/* {input value, corrected value} */
+		{0, 0},
+		{15, 15},
+		{30, 30},
+		{45, 45},
+		{60, 60},
+		{75, 75},
+		{90, 90},
+		{105, 105},
+		{120, 120},
+		{135, 135},
+		{150, 150},
+		{165, 165},
+		{180, 180},
+		{195, 195},
+		{210, 210},
+		{225, 225},
+		{240, 240},
+		{255, 255},
+	};
+
+	u32 lcd_cmap_tbl[2][3][4] = {
+		{
+		 {LCD_CMAP_G0, LCD_CMAP_B1, LCD_CMAP_G2, LCD_CMAP_B3},
+		 {LCD_CMAP_B0, LCD_CMAP_R1, LCD_CMAP_B2, LCD_CMAP_R3},
+		 {LCD_CMAP_R0, LCD_CMAP_G1, LCD_CMAP_R2, LCD_CMAP_G3},
+		 },
+		{
+		 {LCD_CMAP_B3, LCD_CMAP_G2, LCD_CMAP_B1, LCD_CMAP_G0},
+		 {LCD_CMAP_R3, LCD_CMAP_B2, LCD_CMAP_R1, LCD_CMAP_B0},
+		 {LCD_CMAP_G3, LCD_CMAP_R2, LCD_CMAP_G1, LCD_CMAP_R0},
+		 },
+	};
+
+	items = sizeof(lcd_gamma_tbl) / 2;
+	for (i = 0; i < items - 1; i++) {
+		u32 num = lcd_gamma_tbl[i + 1][0] - lcd_gamma_tbl[i][0];
+
+		for (j = 0; j < num; j++) {
+			u32 value = 0;
+
+			value =
+			    lcd_gamma_tbl[i][1] +
+			    ((lcd_gamma_tbl[i + 1][1] -
+			      lcd_gamma_tbl[i][1]) * j) / num;
+			info->lcd_gamma_tbl[lcd_gamma_tbl[i][0] + j] =
+			    (value << 16) + (value << 8) + value;
+		}
+	}
+	info->lcd_gamma_tbl[255] =
+	    (lcd_gamma_tbl[items - 1][1] << 16) +
+	    (lcd_gamma_tbl[items - 1][1] << 8) + lcd_gamma_tbl[items - 1][1];
+
+	memcpy(info->lcd_cmap_tbl, lcd_cmap_tbl, sizeof(lcd_cmap_tbl));
+
+}
+
+static s32 LCD_open_flow(u32 sel)
+{
+	/* open lcd power, and delay 50ms */
+	LCD_OPEN_FUNC(sel, LCD_power_on, 20);
+	/* open lcd power, than delay 200ms */
+	LCD_OPEN_FUNC(sel, LCD_panel_init, 20);
+	/* open lcd controller, and delay 100ms */
+	LCD_OPEN_FUNC(sel, sunxi_lcd_tcon_enable, 100);
+	/* open lcd backlight, and delay 0ms */
+	LCD_OPEN_FUNC(sel, LCD_bl_open, 0);
+
+	return 0;
+}
+
+static s32 LCD_close_flow(u32 sel)
+{
+	/* close lcd backlight, and delay 0ms */
+	LCD_CLOSE_FUNC(sel, LCD_bl_close, 0);
+	/* close lcd controller, and delay 0ms */
+	LCD_CLOSE_FUNC(sel, sunxi_lcd_tcon_disable, 0);
+	/* open lcd power, than delay 200ms */
+	LCD_CLOSE_FUNC(sel, LCD_panel_exit, 200);
+	/* close lcd power, and delay 500ms */
+	LCD_CLOSE_FUNC(sel, LCD_power_off, 500);
+
+	return 0;
+}
+
+static void LCD_power_on(u32 sel)
+{
+	/* config lcd_power pin to open lcd power0 */
+	sunxi_lcd_power_enable(sel, 0);
+	sunxi_lcd_pin_cfg(sel, 1);
+
+}
+
+static void LCD_power_off(u32 sel)
+{
+	sunxi_lcd_pin_cfg(sel, 0);
+	/* config lcd_power pin to close lcd power0 */
+	sunxi_lcd_power_disable(sel, 0);
+}
+
+static void LCD_bl_open(u32 sel)
+{
+tick_printf("=====================LCD_bl_open\n");
+	sunxi_lcd_pwm_enable(sel);
+	sunxi_lcd_backlight_enable(sel);
+}
+
+static void LCD_bl_close(u32 sel)
+{
+	/* config lcd_bl_en pin to close lcd backlight */
+	sunxi_lcd_backlight_disable(sel);
+	sunxi_lcd_pwm_disable(sel);
+}
+
+//three line 9bit mode
+static void LCD_WRITE_DATA(u32 value)
+{
+	u32 i;
+	st7701s_spi_cs_0;
+	st7701s_spi_sdi_1;
+	st7701s_spi_scl_0;
+	sunxi_lcd_delay_us(10);
+	st7701s_spi_scl_1;
+	for (i = 0; i < 8; i++) {
+		sunxi_lcd_delay_us(10);
+		if (value & 0x80)
+			st7701s_spi_sdi_1;
+		else
+			st7701s_spi_sdi_0;
+		value <<= 1;
+		sunxi_lcd_delay_us(10);
+		st7701s_spi_scl_0;
+		st7701s_spi_scl_1;
+	}
+	sunxi_lcd_delay_us(10);
+	st7701s_spi_cs_1;
+}
+
+static void LCD_WRITE_COMMAND(u32 value)
+{
+	u32 i;
+	st7701s_spi_cs_0;
+	st7701s_spi_sdi_0;
+	st7701s_spi_scl_0;
+	sunxi_lcd_delay_us(10);
+	st7701s_spi_scl_1;
+	for (i = 0; i < 8; i++) {
+		sunxi_lcd_delay_us(10);
+		if (value & 0x80)
+			st7701s_spi_sdi_1;
+		else
+			st7701s_spi_sdi_0;
+		st7701s_spi_scl_0;
+		sunxi_lcd_delay_us(10);
+		st7701s_spi_scl_1;
+		value <<= 1;
+	}
+	sunxi_lcd_delay_us(10);
+	st7701s_spi_cs_1;
+}
+
+
+static void LCD_panel_init(u32 sel)
+{
+    tick_printf("=====================LCD_panel_init\n");
+    LCD_WRITE_COMMAND(0xFF);
+    LCD_WRITE_DATA(0x77);
+    LCD_WRITE_DATA(0x01);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x10);
+
+    LCD_WRITE_COMMAND(0xC0);
+    LCD_WRITE_DATA(0x3B);
+    LCD_WRITE_DATA(0x00);
+
+    LCD_WRITE_COMMAND(0xC1);
+    LCD_WRITE_DATA(0x0D);
+    LCD_WRITE_DATA(0x02);
+
+    LCD_WRITE_COMMAND(0xC2);
+    LCD_WRITE_DATA(0x21);
+    LCD_WRITE_DATA(0x08);
+    
+//    //RGB Interface Setting
+//    LCD_WRITE_COMMAND(0xC3);
+//    LCD_WRITE_DATA(0x02);
+    
+    LCD_WRITE_COMMAND(0xCD);
+    LCD_WRITE_DATA(0x18);//0F 08-OK  D0-D18      
+      
+
+    LCD_WRITE_COMMAND(0xB0);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x18);
+    LCD_WRITE_DATA(0x0E);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x06);
+    LCD_WRITE_DATA(0x07);
+    LCD_WRITE_DATA(0x08);
+    LCD_WRITE_DATA(0x07);
+    LCD_WRITE_DATA(0x22);
+    LCD_WRITE_DATA(0x04);
+    LCD_WRITE_DATA(0x12);
+    LCD_WRITE_DATA(0x0F);
+    LCD_WRITE_DATA(0xAA);
+    LCD_WRITE_DATA(0x31);
+    LCD_WRITE_DATA(0x18);
+
+    LCD_WRITE_COMMAND(0xB1);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x19);
+    LCD_WRITE_DATA(0x0E);
+    LCD_WRITE_DATA(0x12);
+    LCD_WRITE_DATA(0x07);
+    LCD_WRITE_DATA(0x08);
+    LCD_WRITE_DATA(0x08);
+    LCD_WRITE_DATA(0x08);
+    LCD_WRITE_DATA(0x22);
+    LCD_WRITE_DATA(0x04);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0xA9);
+    LCD_WRITE_DATA(0x32);
+    LCD_WRITE_DATA(0x18);
+
+    LCD_WRITE_COMMAND(0xFF);
+    LCD_WRITE_DATA(0x77);
+    LCD_WRITE_DATA(0x01);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x11);
+
+    LCD_WRITE_COMMAND(0xB0);
+    LCD_WRITE_DATA(0x60);
+
+    LCD_WRITE_COMMAND(0xB1);
+    LCD_WRITE_DATA(0x30);
+
+    LCD_WRITE_COMMAND(0xB2);
+    LCD_WRITE_DATA(0x87);
+
+    LCD_WRITE_COMMAND(0xB3);
+    LCD_WRITE_DATA(0x80);
+
+    LCD_WRITE_COMMAND(0xB5);
+    LCD_WRITE_DATA(0x49);
+
+    LCD_WRITE_COMMAND(0xB7);
+    LCD_WRITE_DATA(0x85);
+
+    LCD_WRITE_COMMAND(0xB8);
+    LCD_WRITE_DATA(0x21);
+
+    LCD_WRITE_COMMAND(0xC1);
+    LCD_WRITE_DATA(0x78);
+
+    LCD_WRITE_COMMAND(0xC2);
+    LCD_WRITE_DATA(0x78);
+    sunxi_lcd_delay_ms(20);
+
+    LCD_WRITE_COMMAND(0xE0);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x1B);
+    LCD_WRITE_DATA(0x02);
+
+    LCD_WRITE_COMMAND(0xE1);
+    LCD_WRITE_DATA(0x08);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x07);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x44);
+    LCD_WRITE_DATA(0x44);
+
+    LCD_WRITE_COMMAND(0xE2);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x44);
+    LCD_WRITE_DATA(0x44);
+    LCD_WRITE_DATA(0xED);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0xEC);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+
+    LCD_WRITE_COMMAND(0xE3);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x11);
+
+    LCD_WRITE_COMMAND(0xE4);
+    LCD_WRITE_DATA(0x44);
+    LCD_WRITE_DATA(0x44);
+
+    LCD_WRITE_COMMAND(0xE5);
+    LCD_WRITE_DATA(0x0A);
+    LCD_WRITE_DATA(0xE9);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x0C);
+    LCD_WRITE_DATA(0xEB);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x0E);
+    LCD_WRITE_DATA(0xED);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x10);
+    LCD_WRITE_DATA(0xEF);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+
+    LCD_WRITE_COMMAND(0xE6);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x11);
+    LCD_WRITE_DATA(0x11);
+
+    LCD_WRITE_COMMAND(0xE7);
+    LCD_WRITE_DATA(0x44);
+    LCD_WRITE_DATA(0x44);
+
+    LCD_WRITE_COMMAND(0xE8);
+    LCD_WRITE_DATA(0x09);
+    LCD_WRITE_DATA(0xE8);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x0B);
+    LCD_WRITE_DATA(0xEA);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+    LCD_WRITE_DATA(0x0D);
+    LCD_WRITE_DATA(0xEC);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0); 
+    LCD_WRITE_DATA(0x0F);
+    LCD_WRITE_DATA(0xEE);
+    LCD_WRITE_DATA(0xD8);
+    LCD_WRITE_DATA(0xA0);
+
+    LCD_WRITE_COMMAND(0xEB);
+    LCD_WRITE_DATA(0x02);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0xE4);
+    LCD_WRITE_DATA(0xE4);
+    LCD_WRITE_DATA(0x88);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x40);
+
+    LCD_WRITE_COMMAND(0xEC);
+    LCD_WRITE_DATA(0x3C);
+    LCD_WRITE_DATA(0x00);
+
+    LCD_WRITE_COMMAND(0xED);
+    LCD_WRITE_DATA(0xAB);
+    LCD_WRITE_DATA(0x89);
+    LCD_WRITE_DATA(0x76);
+    LCD_WRITE_DATA(0x54);
+    LCD_WRITE_DATA(0x02);
+    LCD_WRITE_DATA(0xFF);
+    LCD_WRITE_DATA(0xFF);
+    LCD_WRITE_DATA(0xFF);
+    LCD_WRITE_DATA(0xFF);
+    LCD_WRITE_DATA(0xFF);
+    LCD_WRITE_DATA(0xFF);
+    LCD_WRITE_DATA(0x20);
+    LCD_WRITE_DATA(0x45);
+    LCD_WRITE_DATA(0x67);
+    LCD_WRITE_DATA(0x98);
+    LCD_WRITE_DATA(0xBA);
+
+    LCD_WRITE_COMMAND(0xFF);
+    LCD_WRITE_DATA(0x77);
+    LCD_WRITE_DATA(0x01);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);
+    LCD_WRITE_DATA(0x00);    
+
+    LCD_WRITE_COMMAND(0x3A);
+    LCD_WRITE_DATA(0x66);
+  
+    LCD_WRITE_COMMAND(0x36);
+    LCD_WRITE_DATA(0x00);
+
+    LCD_WRITE_COMMAND(0x21);
+
+    LCD_WRITE_COMMAND(0x11);
+    sunxi_lcd_delay_ms(120);
+    
+    LCD_WRITE_COMMAND(0x29);
+    sunxi_lcd_delay_ms(20);
+	return;
+}
+
+static void LCD_panel_exit(u32 sel)
+{
+	return;
+}
+
+/* sel: 0:lcd0; 1:lcd1 */
+static s32 LCD_user_defined_func(u32 sel, u32 para1, u32 para2, u32 para3)
+{
+	return 0;
+}
+
+__lcd_panel_t st7701s_rgb_panel = {
+	/* panel driver name, must mach the lcd_drv_name in sys_config.fex */
+	.name = "st7701s_rgb",
+	.func = {
+		 .cfg_panel_info = LCD_cfg_panel_info,
+		 .cfg_open_flow = LCD_open_flow,
+		 .cfg_close_flow = LCD_close_flow,
+		 .lcd_user_defined_func = LCD_user_defined_func,
+		 }
+	,
+};
diff --git a/drivers/video/sunxi/disp2/disp/lcd/st7701s_rgb.h b/drivers/video/sunxi/disp2/disp/lcd/st7701s_rgb.h
new file mode 100644
index 0000000..c789402
--- /dev/null
+++ b/drivers/video/sunxi/disp2/disp/lcd/st7701s_rgb.h
@@ -0,0 +1,18 @@
+/*
+ * Allwinner SoCs display driver.
+ *
+ * Copyright (C) 2021 Sipeed.
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#ifndef __ST7701S_RGB_PANEL_H__
+#define  __ST7701S_RGB_PANEL_H__
+
+#include "panels.h"
+
+extern  __lcd_panel_t st7701s_rgb_panel;
+
+#endif
diff --git a/drivers/video/sunxi/logo_display/cmd_sunxi_bmp.c b/drivers/video/sunxi/logo_display/cmd_sunxi_bmp.c
index 9941342..9da3494 100644
--- a/drivers/video/sunxi/logo_display/cmd_sunxi_bmp.c
+++ b/drivers/video/sunxi/logo_display/cmd_sunxi_bmp.c
@@ -342,6 +342,8 @@ int sunxi_bmp_display(char *name)
 	ret = show_bmp_on_fb(bmp_head_addr, FB_ID_0);
 	if (ret != 0)
 		pr_error("show bmp on fb failed !%d\n", ret);
+	else
+		pr_error("show bmp on fb OK !\n");
 
 free2:
 	free(bmp_head_addr);
